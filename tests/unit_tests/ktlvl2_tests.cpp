/* ************************************************************************
 * Copyright (c) 2023 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ************************************************************************ */

#include "aoclsparse.h"
#define KT_ADDRESS_TYPE aoclsparse_int
#include "aoclsparse_kernel_templates.hpp"
#undef KT_ADDRESS_TYPE

#include "common_data_utils.h"

#include <algorithm>
#include <complex>
#include <limits>
#include <type_traits>
#include <vector>

namespace TestsKT
{

    template <typename T>
    struct tolerance
    {
    };
    template <>
    struct tolerance<float>
    {
        using type = float;
    };
    template <>
    struct tolerance<double>
    {
        using type = double;
    };
    template <>
    struct tolerance<std::complex<float>>
    {
        using type = float;
    };
    template <>
    struct tolerance<std::complex<double>>
    {
        using type = double;
    };

    template <typename T>
    using tolerance_t = typename tolerance<T>::type;

    using namespace kernel_templates;
    using namespace std;

    template <int SZ, typename SUF>
    void kt_spmv(const aoclsparse_int                  m,
                 [[maybe_unused]] const aoclsparse_int n,
                 [[maybe_unused]] const aoclsparse_int nnz,
                 const SUF *__restrict__ aval,
                 const aoclsparse_int *__restrict__ icol,
                 const aoclsparse_int *__restrict__ crstart,
                 const aoclsparse_int *__restrict__ crend,
                 const SUF *__restrict__ x,
                 SUF *__restrict__ y)
    {

        avxvector_t<SZ, SUF> va, vx, vb;
        aoclsparse_int       j;
        const size_t         k = tsz_v<SZ, SUF>;

        for(aoclsparse_int i = 0; i < m; i++)
        {
            SUF result            = 0.0;
            vb                    = kt_setzero_p<SZ, SUF>();
            aoclsparse_int nnz    = crend[i] - crstart[i];
            aoclsparse_int k_iter = nnz / k;
            aoclsparse_int k_rem  = nnz % k;

            //Loop in multiples of K non-zeroes
            for(j = crstart[i]; j < crend[i] - k_rem; j += k)
            {
                va = kt_loadu_p<SZ, SUF>(&aval[j]);
                vx = kt_set_p<SZ, SUF>(x, &icol[j]);
                vb = kt_fmadd_p<SZ, SUF>(va, vx, vb);
            }
            if(k_iter)
            {
                // Horizontal addition
                result = kt_hsum_p<SZ, SUF>(vb);
            }
            //Remainder loop for nnz%k
            for(j = crend[i] - k_rem; j < crend[i]; j++)
            {
                result += aval[j] * x[icol[j]];
            }

            // Perform alpha * A * x
            // result *= alpha;
            // result += beta * y[i];
            y[i] = result;
        }
    }

    template <int SZ, typename T>
    void driver_spmv(void)
    {
        using namespace std::complex_literals;
        aoclsparse_int              m, n, nnz;
        std::vector<T>              x, b, bref, aval;
        std::vector<aoclsparse_int> icola, icrowa;

        // Autogenerated
        // ==== START SECTION 1 ================================================
        // cond(A) = 41.4827
        m   = 33;
        n   = 25;
        nnz = 784;
        // sparsity: 0.95
        // ==== END   SECTION 1 ================================================
        x.resize(n);
        b.resize(m);
        bref.resize(m);
        icrowa.resize(n + 1);
        icola.resize(nnz);
        aval.resize(nnz);
        icrowa
            = {0,   24,  47,  69,  93,  117, 142, 166, 189, 214, 239, 263, 287, 310, 335, 359, 384,
               407, 432, 455, 479, 502, 525, 548, 573, 596, 617, 641, 665, 689, 711, 735, 760, 784};
        icola = {
            0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22,
            23, 24, 0,  1,  2,  3,  4,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  11, 12, 13, 14, 16, 17, 18, 19, 20,
            22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,
            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11,
            12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 0,  2,  3,  5,  6,  7,  8,  9,  10, 11,
            12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,
            9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,
            6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,
            3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,
            1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23,
            24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22,
            23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
            20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  9,  10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,
            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  6,  7,  8,  9,  10, 11, 12,
            13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,
            8,  9,  10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 0,  1,  2,  3,  4,  5,  6,
            7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 0,  1,  2,  3,  5,
            6,  7,  8,  9,  10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1,  2,  4,  5,
            6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,
            3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0,  1,
            2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
            24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21,
            22, 24, 0,  1,  2,  3,  5,  6,  7,  8,  9,  10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23,
            24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21,
            22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  4,  5,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23, 24, 0,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,
            16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12,
            13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};
        // ==== END   SECTION 1 ================================================
        if constexpr(std::is_same_v<T, std::complex<double>>
                     || std::is_same_v<T, std::complex<float>>)
        {
            // ==== START COPY SECTION 2 (COMPLEX) =================================
            aval = {(T){8, 5},   (T){3, 2},  (T){7, 10},  (T){8, 6},   (T){8, 3},   (T){6, 4},
                    (T){1, 4},   (T){1, 4},  (T){6, 10},  (T){7, 2},   (T){7, 1},   (T){8, 0},
                    (T){6, 8},   (T){5, 7},  (T){8, 2},   (T){9, 9},   (T){3, 9},   (T){6, 6},
                    (T){9, 5},   (T){0, 1},  (T){3, 2},   (T){6, 8},   (T){5, 9},   (T){10, 3},
                    (T){2, 6},   (T){2, 4},  (T){5, 2},   (T){6, 1},   (T){3, 7},   (T){3, 2},
                    (T){5, 0},   (T){4, 6},  (T){2, 10},  (T){7, 1},   (T){7, 9},   (T){6, 2},
                    (T){1, 3},   (T){8, 2},  (T){2, 8},   (T){6, 6},   (T){9, 4},   (T){8, 10},
                    (T){3, 0},   (T){0, 9},  (T){3, 5},   (T){6, 6},   (T){9, 4},   (T){7, 8},
                    (T){7, 2},   (T){1, 5},  (T){9, 1},   (T){10, 2},  (T){9, 8},   (T){6, 4},
                    (T){2, 3},   (T){1, 8},  (T){7, 7},   (T){8, 2},   (T){2, 0},   (T){8, 8},
                    (T){3, 2},   (T){1, 4},  (T){6, 8},   (T){10, 6},  (T){8, 9},   (T){4, 4},
                    (T){1, 9},   (T){5, 8},  (T){3, 5},   (T){6, 3},   (T){4, 2},   (T){8, 1},
                    (T){1, 5},   (T){2, 4},  (T){1, 5},   (T){9, 4},   (T){1, 6},   (T){3, 5},
                    (T){5, 8},   (T){0, 4},  (T){2, 5},   (T){5, 1},   (T){1, 4},   (T){5, 3},
                    (T){1, 10},  (T){0, 6},  (T){8, 2},   (T){7, 5},   (T){1, 4},   (T){1, 7},
                    (T){5, 6},   (T){2, 2},  (T){10, 7},  (T){8, 6},   (T){7, 6},   (T){1, 2},
                    (T){3, 2},   (T){6, 4},  (T){9, 5},   (T){9, 0},   (T){3, 9},   (T){2, 5},
                    (T){10, 10}, (T){1, 9},  (T){2, 7},   (T){6, 5},   (T){2, 6},   (T){0, 9},
                    (T){9, 1},   (T){2, 10}, (T){4, 3},   (T){2, 7},   (T){5, 6},   (T){7, 6},
                    (T){7, 0},   (T){2, 2},  (T){10, 6},  (T){2, 3},   (T){5, 3},   (T){2, 7},
                    (T){9, 9},   (T){3, 1},  (T){0, 5},   (T){5, 4},   (T){2, 2},   (T){8, 6},
                    (T){6, 1},   (T){5, 10}, (T){0, 2},   (T){10, 7},  (T){2, 3},   (T){5, 6},
                    (T){10, 4},  (T){10, 1}, (T){3, 2},   (T){8, 3},   (T){6, 2},   (T){8, 2},
                    (T){10, 9},  (T){3, 6},  (T){5, 7},   (T){3, 6},   (T){6, 5},   (T){0, 6},
                    (T){1, 1},   (T){2, 2},  (T){4, 0},   (T){1, 6},   (T){3, 7},   (T){0, 1},
                    (T){7, 2},   (T){2, 6},  (T){2, 8},   (T){3, 9},   (T){2, 3},   (T){9, 3},
                    (T){2, 3},   (T){8, 7},  (T){6, 4},   (T){9, 5},   (T){1, 4},   (T){4, 2},
                    (T){5, 7},   (T){2, 5},  (T){2, 1},   (T){1, 6},   (T){9, 8},   (T){8, 9},
                    (T){1, 5},   (T){4, 7},  (T){2, 9},   (T){2, 8},   (T){10, 10}, (T){2, 8},
                    (T){1, 1},   (T){3, 2},  (T){9, 3},   (T){2, 9},   (T){4, 2},   (T){4, 5},
                    (T){5, 7},   (T){4, 10}, (T){7, 7},   (T){2, 7},   (T){2, 10},  (T){9, 5},
                    (T){2, 6},   (T){3, 5},  (T){8, 10},  (T){2, 9},   (T){5, 4},   (T){6, 6},
                    (T){9, 9},   (T){7, 4},  (T){2, 9},   (T){6, 4},   (T){2, 5},   (T){6, 5},
                    (T){8, 5},   (T){6, 7},  (T){6, 7},   (T){6, 8},   (T){9, 6},   (T){1, 9},
                    (T){6, 1},   (T){0, 8},  (T){4, 3},   (T){9, 6},   (T){10, 5},  (T){9, 1},
                    (T){9, 2},   (T){6, 1},  (T){9, 7},   (T){2, 7},   (T){3, 4},   (T){10, 1},
                    (T){8, 7},   (T){1, 10}, (T){8, 2},   (T){5, 9},   (T){5, 9},   (T){3, 3},
                    (T){4, 1},   (T){5, 4},  (T){3, 6},   (T){7, 8},   (T){2, 1},   (T){8, 5},
                    (T){10, 7},  (T){0, 4},  (T){4, 1},   (T){8, 7},   (T){8, 1},   (T){7, 7},
                    (T){7, 0},   (T){1, 2},  (T){3, 6},   (T){9, 3},   (T){9, 9},   (T){8, 4},
                    (T){7, 2},   (T){3, 2},  (T){4, 2},   (T){3, 6},   (T){6, 5},   (T){8, 2},
                    (T){3, 3},   (T){6, 3},  (T){6, 4},   (T){3, 9},   (T){4, 4},   (T){2, 1},
                    (T){8, 5},   (T){6, 4},  (T){8, 0},   (T){7, 3},   (T){10, 2},  (T){5, 1},
                    (T){1, 4},   (T){6, 8},  (T){10, 8},  (T){1, 7},   (T){3, 6},   (T){9, 9},
                    (T){4, 5},   (T){9, 9},  (T){8, 7},   (T){2, 3},   (T){6, 4},   (T){8, 5},
                    (T){4, 9},   (T){1, 10}, (T){5, 4},   (T){6, 4},   (T){4, 0},   (T){1, 5},
                    (T){3, 4},   (T){4, 6},  (T){1, 4},   (T){1, 5},   (T){9, 6},   (T){6, 3},
                    (T){8, 2},   (T){1, 3},  (T){8, 6},   (T){2, 8},   (T){4, 2},   (T){3, 10},
                    (T){8, 8},   (T){1, 5},  (T){6, 4},   (T){7, 5},   (T){5, 7},   (T){2, 3},
                    (T){3, 9},   (T){3, 9},  (T){6, 9},   (T){4, 1},   (T){10, 6},  (T){9, 1},
                    (T){9, 1},   (T){6, 7},  (T){5, 2},   (T){6, 9},   (T){8, 4},   (T){6, 1},
                    (T){2, 5},   (T){9, 8},  (T){7, 9},   (T){6, 1},   (T){4, 3},   (T){4, 1},
                    (T){9, 4},   (T){2, 3},  (T){6, 5},   (T){4, 2},   (T){7, 9},   (T){3, 1},
                    (T){5, 8},   (T){4, 4},  (T){5, 1},   (T){6, 0},   (T){1, 8},   (T){8, 2},
                    (T){6, 1},   (T){7, 6},  (T){6, 1},   (T){4, 8},   (T){6, 3},   (T){4, 1},
                    (T){0, 4},   (T){5, 9},  (T){1, 3},   (T){1, 5},   (T){6, 1},   (T){4, 6},
                    (T){7, 9},   (T){7, 9},  (T){0, 6},   (T){0, 9},   (T){7, 8},   (T){1, 9},
                    (T){10, 1},  (T){2, 6},  (T){2, 6},   (T){1, 0},   (T){7, 2},   (T){7, 6},
                    (T){9, 6},   (T){4, 7},  (T){5, 5},   (T){0, 1},   (T){7, 5},   (T){10, 3},
                    (T){8, 5},   (T){6, 2},  (T){7, 3},   (T){1, 9},   (T){9, 1},   (T){9, 0},
                    (T){2, 1},   (T){8, 3},  (T){4, 10},  (T){5, 7},   (T){9, 10},  (T){5, 7},
                    (T){3, 1},   (T){0, 8},  (T){9, 0},   (T){0, 3},   (T){3, 3},   (T){9, 2},
                    (T){2, 3},   (T){9, 0},  (T){2, 6},   (T){9, 3},   (T){8, 7},   (T){6, 1},
                    (T){9, 3},   (T){0, 9},  (T){10, 9},  (T){7, 7},   (T){10, 1},  (T){3, 7},
                    (T){9, 3},   (T){9, 9},  (T){1, 8},   (T){7, 3},   (T){3, 7},   (T){8, 8},
                    (T){8, 5},   (T){3, 0},  (T){2, 9},   (T){2, 7},   (T){1, 2},   (T){3, 5},
                    (T){2, 3},   (T){3, 2},  (T){3, 6},   (T){1, 2},   (T){7, 3},   (T){8, 4},
                    (T){1, 10},  (T){9, 6},  (T){8, 4},   (T){8, 4},   (T){2, 7},   (T){4, 6},
                    (T){9, 10},  (T){10, 9}, (T){3, 0},   (T){9, 5},   (T){8, 1},   (T){4, 1},
                    (T){4, 3},   (T){9, 2},  (T){10, 5},  (T){10, 7},  (T){4, 8},   (T){7, 10},
                    (T){3, 6},   (T){10, 0}, (T){4, 2},   (T){1, 9},   (T){6, 7},   (T){2, 2},
                    (T){8, 9},   (T){6, 5},  (T){2, 4},   (T){9, 1},   (T){0, 5},   (T){0, 10},
                    (T){4, 9},   (T){5, 9},  (T){7, 5},   (T){5, 10},  (T){1, 7},   (T){3, 7},
                    (T){2, 3},   (T){9, 8},  (T){4, 2},   (T){2, 4},   (T){1, 3},   (T){3, 8},
                    (T){2, 6},   (T){7, 9},  (T){7, 3},   (T){6, 5},   (T){2, 2},   (T){1, 7},
                    (T){5, 5},   (T){0, 4},  (T){7, 6},   (T){9, 1},   (T){3, 3},   (T){7, 5},
                    (T){8, 9},   (T){8, 9},  (T){7, 1},   (T){10, 7},  (T){0, 6},   (T){8, 3},
                    (T){5, 2},   (T){7, 4},  (T){10, 0},  (T){4, 9},   (T){2, 4},   (T){5, 0},
                    (T){0, 3},   (T){7, 1},  (T){8, 1},   (T){9, 1},   (T){8, 9},   (T){4, 8},
                    (T){2, 1},   (T){3, 3},  (T){8, 10},  (T){8, 10},  (T){7, 5},   (T){6, 8},
                    (T){2, 7},   (T){8, 6},  (T){8, 9},   (T){0, 1},   (T){2, 4},   (T){8, 4},
                    (T){3, 1},   (T){5, 2},  (T){2, 6},   (T){7, 4},   (T){0, 6},   (T){10, 2},
                    (T){5, 9},   (T){5, 6},  (T){7, 4},   (T){7, 4},   (T){1, 10},  (T){9, 2},
                    (T){0, 4},   (T){3, 0},  (T){9, 8},   (T){4, 5},   (T){1, 1},   (T){1, 9},
                    (T){5, 6},   (T){4, 5},  (T){5, 6},   (T){1, 1},   (T){7, 4},   (T){6, 9},
                    (T){3, 3},   (T){2, 10}, (T){2, 7},   (T){6, 3},   (T){7, 0},   (T){7, 6},
                    (T){3, 8},   (T){9, 6},  (T){3, 9},   (T){5, 6},   (T){2, 4},   (T){7, 2},
                    (T){2, 6},   (T){5, 1},  (T){0, 1},   (T){0, 10},  (T){4, 4},   (T){10, 3},
                    (T){7, 2},   (T){2, 1},  (T){3, 4},   (T){7, 8},   (T){3, 8},   (T){10, 7},
                    (T){10, 6},  (T){8, 6},  (T){10, 3},  (T){1, 0},   (T){2, 10},  (T){7, 2},
                    (T){6, 0},   (T){0, 3},  (T){0, 5},   (T){8, 7},   (T){5, 6},   (T){3, 5},
                    (T){2, 4},   (T){8, 6},  (T){8, 2},   (T){0, 4},   (T){0, 5},   (T){3, 8},
                    (T){2, 7},   (T){6, 7},  (T){9, 3},   (T){1, 2},   (T){8, 5},   (T){9, 9},
                    (T){2, 8},   (T){2, 3},  (T){2, 3},   (T){2, 4},   (T){2, 9},   (T){7, 8},
                    (T){7, 9},   (T){1, 8},  (T){4, 1},   (T){7, 9},   (T){7, 6},   (T){6, 3},
                    (T){7, 7},   (T){1, 7},  (T){2, 7},   (T){5, 1},   (T){5, 6},   (T){4, 4},
                    (T){3, 9},   (T){5, 4},  (T){0, 9},   (T){10, 10}, (T){7, 2},   (T){9, 4},
                    (T){8, 3},   (T){10, 3}, (T){1, 7},   (T){8, 9},   (T){5, 4},   (T){6, 1},
                    (T){9, 5},   (T){1, 3},  (T){3, 7},   (T){8, 10},  (T){3, 1},   (T){3, 7},
                    (T){7, 10},  (T){8, 1},  (T){7, 3},   (T){9, 5},   (T){1, 2},   (T){8, 7},
                    (T){9, 1},   (T){2, 1},  (T){1, 2},   (T){4, 5},   (T){9, 2},   (T){9, 1},
                    (T){2, 2},   (T){3, 4},  (T){0, 6},   (T){7, 4},   (T){3, 10},  (T){10, 7},
                    (T){1, 9},   (T){9, 7},  (T){4, 9},   (T){9, 6},   (T){4, 3},   (T){4, 7},
                    (T){7, 3},   (T){6, 4},  (T){2, 4},   (T){9, 4},   (T){7, 5},   (T){5, 2},
                    (T){8, 9},   (T){4, 0},  (T){10, 7},  (T){7, 1},   (T){4, 7},   (T){1, 6},
                    (T){2, 7},   (T){1, 9},  (T){4, 9},   (T){3, 10},  (T){7, 3},   (T){7, 10},
                    (T){9, 3},   (T){9, 3},  (T){3, 6},   (T){4, 4},   (T){9, 4},   (T){2, 0},
                    (T){6, 6},   (T){2, 3},  (T){5, 4},   (T){0, 5},   (T){5, 10},  (T){1, 7},
                    (T){8, 5},   (T){1, 4},  (T){4, 3},   (T){8, 5},   (T){2, 0},   (T){7, 7},
                    (T){7, 1},   (T){7, 7},  (T){8, 5},   (T){5, 3},   (T){5, 10},  (T){1, 3},
                    (T){2, 3},   (T){5, 7},  (T){4, 3},   (T){8, 1},   (T){3, 1},   (T){4, 1},
                    (T){8, 5},   (T){1, 0},  (T){3, 10},  (T){1, 1},   (T){10, 3},  (T){4, 7},
                    (T){0, 5},   (T){7, 10}, (T){8, 7},   (T){9, 4},   (T){4, 0},   (T){1, 6},
                    (T){2, 4},   (T){3, 5},  (T){4, 2},   (T){0, 1},   (T){9, 10},  (T){1, 1},
                    (T){1, 5},   (T){4, 10}, (T){7, 2},   (T){9, 4},   (T){2, 3},   (T){1, 3},
                    (T){7, 5},   (T){3, 10}, (T){6, 8},   (T){3, 6},   (T){7, 1},   (T){4, 3},
                    (T){2, 8},   (T){4, 9},  (T){8, 1},   (T){2, 0},   (T){1, 1},   (T){5, 4},
                    (T){1, 4},   (T){5, 2},  (T){7, 8},   (T){9, 9},   (T){2, 2},   (T){9, 7},
                    (T){5, 7},   (T){5, 2},  (T){5, 1},   (T){4, 2},   (T){5, 10},  (T){3, 7},
                    (T){6, 1},   (T){5, 8},  (T){6, 9},   (T){8, 2},   (T){3, 7},   (T){0, 9},
                    (T){9, 1},   (T){6, 9},  (T){5, 4},   (T){10, 7},  (T){6, 5},   (T){7, 3},
                    (T){1, 3},   (T){7, 10}, (T){5, 5},   (T){2, 4},   (T){3, 1},   (T){2, 3},
                    (T){4, 2},   (T){5, 3},  (T){1, 3},   (T){5, 7},   (T){8, 4},   (T){6, 4},
                    (T){8, 7},   (T){0, 10}, (T){6, 9},   (T){8, 10},  (T){5, 4},   (T){9, 7},
                    (T){5, 4},   (T){0, 3},  (T){10, 10}, (T){7, 7},   (T){3, 3},   (T){3, 9},
                    (T){1, 3},   (T){6, 2},  (T){6, 1},   (T){2, 10},  (T){2, 4},   (T){7, 9},
                    (T){8, 6},   (T){7, 3},  (T){8, 5},   (T){3, 2},   (T){5, 0},   (T){7, 6},
                    (T){0, 8},   (T){2, 6},  (T){10, 7},  (T){1, 8},   (T){3, 8},   (T){9, 3},
                    (T){2, 7},   (T){7, 1},  (T){7, 8},   (T){3, 3},   (T){7, 8},   (T){5, 7},
                    (T){1, 4},   (T){8, 2},  (T){6, 6},   (T){0, 7},   (T){4, 10},  (T){0, 3},
                    (T){2, 9},   (T){4, 1},  (T){8, 3},   (T){5, 8}};
            x    = {(T){1.9, 0.4}, (T){7, 3.9},   (T){7.6, 1.3}, (T){7.4, 0.9}, (T){9, 5.3},
                    (T){7.8, 6.1}, (T){9.3, 0},   (T){7.6, 8.2}, (T){8.5, 0.4}, (T){7.8, 9.2},
                    (T){3.3, 6},   (T){0.3, 8.7}, (T){9.7, 8},   (T){4.6, 4.6}, (T){5, 9.8},
                    (T){3.1, 1.2}, (T){3.5, 3.4}, (T){2.5, 9.5}, (T){0.6, 8.4}, (T){9.3, 4.6},
                    (T){6.8, 3.4}, (T){1.8, 9.9}, (T){8.9, 7.3}, (T){8.4, 4},   (T){7.9, 6.7}};
            // b = alpha op(A) * x
            bref = {(T){237.6, 1492.2}, (T){44.7, 1198.1},  (T){135.1, 1342.9}, (T){-30.1, 1077.5},
                    (T){-51, 1335.4},   (T){201.3, 1329.1}, (T){-194.3, 950.9}, (T){-173.5, 1471.7},
                    (T){170.8, 1562.7}, (T){234.8, 1485.7}, (T){152.4, 1261},   (T){153.1, 1282},
                    (T){210.4, 1444},   (T){171, 1157.4},   (T){206.4, 1492.7}, (T){323.6, 1528.7},
                    (T){72.2, 1294.9},  (T){246.3, 1516.6}, (T){-70.1, 1237.6}, (T){358.1, 1357},
                    (T){103.9, 1226.6}, (T){-95.1, 1186.8}, (T){161.5, 1182.2}, (T){-119.3, 1386.1},
                    (T){236.7, 1417.3}, (T){53.3, 1162.6},  (T){47.9, 1490.3},  (T){89, 1250},
                    (T){-7.3, 1159.1},  (T){43.9, 1138.4},  (T){10, 1303.8},    (T){78, 1528.3},
                    (T){-49.7, 1419.5}};
            // ==== END   SECTION 2 ================================================
        }
        else
        {
            // ==== START COPY SECTION 3 (REAL) ====================================
            aval = {
                (T)13, (T)5,  (T)17, (T)14, (T)11, (T)10, (T)5,  (T)5,  (T)16, (T)9,  (T)8,  (T)8,
                (T)14, (T)12, (T)10, (T)18, (T)12, (T)12, (T)14, (T)1,  (T)5,  (T)14, (T)14, (T)13,
                (T)8,  (T)6,  (T)7,  (T)7,  (T)10, (T)5,  (T)5,  (T)10, (T)12, (T)8,  (T)16, (T)8,
                (T)4,  (T)10, (T)10, (T)12, (T)13, (T)18, (T)3,  (T)9,  (T)8,  (T)12, (T)13, (T)15,
                (T)9,  (T)6,  (T)10, (T)12, (T)17, (T)10, (T)5,  (T)9,  (T)14, (T)10, (T)2,  (T)16,
                (T)5,  (T)5,  (T)14, (T)16, (T)17, (T)8,  (T)10, (T)13, (T)8,  (T)9,  (T)6,  (T)9,
                (T)6,  (T)6,  (T)6,  (T)13, (T)7,  (T)8,  (T)13, (T)4,  (T)7,  (T)6,  (T)5,  (T)8,
                (T)11, (T)6,  (T)10, (T)12, (T)5,  (T)8,  (T)11, (T)4,  (T)17, (T)14, (T)13, (T)3,
                (T)5,  (T)10, (T)14, (T)9,  (T)12, (T)7,  (T)20, (T)10, (T)9,  (T)11, (T)8,  (T)9,
                (T)10, (T)12, (T)7,  (T)9,  (T)11, (T)13, (T)7,  (T)4,  (T)16, (T)5,  (T)8,  (T)9,
                (T)18, (T)4,  (T)5,  (T)9,  (T)4,  (T)14, (T)7,  (T)15, (T)2,  (T)17, (T)5,  (T)11,
                (T)14, (T)11, (T)5,  (T)11, (T)8,  (T)10, (T)19, (T)9,  (T)12, (T)9,  (T)11, (T)6,
                (T)2,  (T)4,  (T)4,  (T)7,  (T)10, (T)1,  (T)9,  (T)8,  (T)10, (T)12, (T)5,  (T)12,
                (T)5,  (T)15, (T)10, (T)14, (T)5,  (T)6,  (T)12, (T)7,  (T)3,  (T)7,  (T)17, (T)17,
                (T)6,  (T)11, (T)11, (T)10, (T)20, (T)10, (T)2,  (T)5,  (T)12, (T)11, (T)6,  (T)9,
                (T)12, (T)14, (T)14, (T)9,  (T)12, (T)14, (T)8,  (T)8,  (T)18, (T)11, (T)9,  (T)12,
                (T)18, (T)11, (T)11, (T)10, (T)7,  (T)11, (T)13, (T)13, (T)13, (T)14, (T)15, (T)10,
                (T)7,  (T)8,  (T)7,  (T)15, (T)15, (T)10, (T)11, (T)7,  (T)16, (T)9,  (T)7,  (T)11,
                (T)15, (T)11, (T)10, (T)14, (T)14, (T)6,  (T)5,  (T)9,  (T)9,  (T)15, (T)3,  (T)13,
                (T)17, (T)4,  (T)5,  (T)15, (T)9,  (T)14, (T)7,  (T)3,  (T)9,  (T)12, (T)18, (T)12,
                (T)9,  (T)5,  (T)6,  (T)9,  (T)11, (T)10, (T)6,  (T)9,  (T)10, (T)12, (T)8,  (T)3,
                (T)13, (T)10, (T)8,  (T)10, (T)12, (T)6,  (T)5,  (T)14, (T)18, (T)8,  (T)9,  (T)18,
                (T)9,  (T)18, (T)15, (T)5,  (T)10, (T)13, (T)13, (T)11, (T)9,  (T)10, (T)4,  (T)6,
                (T)7,  (T)10, (T)5,  (T)6,  (T)15, (T)9,  (T)10, (T)4,  (T)14, (T)10, (T)6,  (T)13,
                (T)16, (T)6,  (T)10, (T)12, (T)12, (T)5,  (T)12, (T)12, (T)15, (T)5,  (T)16, (T)10,
                (T)10, (T)13, (T)7,  (T)15, (T)12, (T)7,  (T)7,  (T)17, (T)16, (T)7,  (T)7,  (T)5,
                (T)13, (T)5,  (T)11, (T)6,  (T)16, (T)4,  (T)13, (T)8,  (T)6,  (T)6,  (T)9,  (T)10,
                (T)7,  (T)13, (T)7,  (T)12, (T)9,  (T)5,  (T)4,  (T)14, (T)4,  (T)6,  (T)7,  (T)10,
                (T)16, (T)16, (T)6,  (T)9,  (T)15, (T)10, (T)11, (T)8,  (T)8,  (T)1,  (T)9,  (T)13,
                (T)15, (T)11, (T)10, (T)1,  (T)12, (T)13, (T)13, (T)8,  (T)10, (T)10, (T)10, (T)9,
                (T)3,  (T)11, (T)14, (T)12, (T)19, (T)12, (T)4,  (T)8,  (T)9,  (T)3,  (T)6,  (T)11,
                (T)5,  (T)9,  (T)8,  (T)12, (T)15, (T)7,  (T)12, (T)9,  (T)19, (T)14, (T)11, (T)10,
                (T)12, (T)18, (T)9,  (T)10, (T)10, (T)16, (T)13, (T)3,  (T)11, (T)9,  (T)3,  (T)8,
                (T)5,  (T)5,  (T)9,  (T)3,  (T)10, (T)12, (T)11, (T)15, (T)12, (T)12, (T)9,  (T)10,
                (T)19, (T)19, (T)3,  (T)14, (T)9,  (T)5,  (T)7,  (T)11, (T)15, (T)17, (T)12, (T)17,
                (T)9,  (T)10, (T)6,  (T)10, (T)13, (T)4,  (T)17, (T)11, (T)6,  (T)10, (T)5,  (T)10,
                (T)13, (T)14, (T)12, (T)15, (T)8,  (T)10, (T)5,  (T)17, (T)6,  (T)6,  (T)4,  (T)11,
                (T)8,  (T)16, (T)10, (T)11, (T)4,  (T)8,  (T)10, (T)4,  (T)13, (T)10, (T)6,  (T)12,
                (T)17, (T)17, (T)8,  (T)17, (T)6,  (T)11, (T)7,  (T)11, (T)10, (T)13, (T)6,  (T)5,
                (T)3,  (T)8,  (T)9,  (T)10, (T)17, (T)12, (T)3,  (T)6,  (T)18, (T)18, (T)12, (T)14,
                (T)9,  (T)14, (T)17, (T)1,  (T)6,  (T)12, (T)4,  (T)7,  (T)8,  (T)11, (T)6,  (T)12,
                (T)14, (T)11, (T)11, (T)11, (T)11, (T)11, (T)4,  (T)3,  (T)17, (T)9,  (T)2,  (T)10,
                (T)11, (T)9,  (T)11, (T)2,  (T)11, (T)15, (T)6,  (T)12, (T)9,  (T)9,  (T)7,  (T)13,
                (T)11, (T)15, (T)12, (T)11, (T)6,  (T)9,  (T)8,  (T)6,  (T)1,  (T)10, (T)8,  (T)13,
                (T)9,  (T)3,  (T)7,  (T)15, (T)11, (T)17, (T)16, (T)14, (T)13, (T)1,  (T)12, (T)9,
                (T)6,  (T)3,  (T)5,  (T)15, (T)11, (T)8,  (T)6,  (T)14, (T)10, (T)4,  (T)5,  (T)11,
                (T)9,  (T)13, (T)12, (T)3,  (T)13, (T)18, (T)10, (T)5,  (T)5,  (T)6,  (T)11, (T)15,
                (T)16, (T)9,  (T)5,  (T)16, (T)13, (T)9,  (T)14, (T)8,  (T)9,  (T)6,  (T)11, (T)8,
                (T)12, (T)9,  (T)9,  (T)20, (T)9,  (T)13, (T)11, (T)13, (T)8,  (T)17, (T)9,  (T)7,
                (T)14, (T)4,  (T)10, (T)18, (T)4,  (T)10, (T)17, (T)9,  (T)10, (T)14, (T)3,  (T)15,
                (T)10, (T)3,  (T)3,  (T)9,  (T)11, (T)10, (T)4,  (T)7,  (T)6,  (T)11, (T)13, (T)17,
                (T)10, (T)16, (T)13, (T)15, (T)7,  (T)11, (T)10, (T)10, (T)6,  (T)13, (T)12, (T)7,
                (T)17, (T)4,  (T)17, (T)8,  (T)11, (T)7,  (T)9,  (T)10, (T)13, (T)13, (T)10, (T)17,
                (T)12, (T)12, (T)9,  (T)8,  (T)13, (T)2,  (T)12, (T)5,  (T)9,  (T)5,  (T)15, (T)8,
                (T)13, (T)5,  (T)7,  (T)13, (T)2,  (T)14, (T)8,  (T)14, (T)13, (T)8,  (T)15, (T)4,
                (T)5,  (T)12, (T)7,  (T)9,  (T)4,  (T)5,  (T)13, (T)1,  (T)13, (T)2,  (T)13, (T)11,
                (T)5,  (T)17, (T)15, (T)13, (T)4,  (T)7,  (T)6,  (T)8,  (T)6,  (T)1,  (T)19, (T)2,
                (T)6,  (T)14, (T)9,  (T)13, (T)5,  (T)4,  (T)12, (T)13, (T)14, (T)9,  (T)8,  (T)7,
                (T)10, (T)13, (T)9,  (T)2,  (T)2,  (T)9,  (T)5,  (T)7,  (T)15, (T)18, (T)4,  (T)16,
                (T)12, (T)7,  (T)6,  (T)6,  (T)15, (T)10, (T)7,  (T)13, (T)15, (T)10, (T)10, (T)9,
                (T)10, (T)15, (T)9,  (T)17, (T)11, (T)10, (T)4,  (T)17, (T)10, (T)6,  (T)4,  (T)5,
                (T)6,  (T)8,  (T)4,  (T)12, (T)12, (T)10, (T)15, (T)10, (T)15, (T)18, (T)9,  (T)16,
                (T)9,  (T)3,  (T)20, (T)14, (T)6,  (T)12, (T)4,  (T)8,  (T)7,  (T)12, (T)6,  (T)16,
                (T)14, (T)10, (T)13, (T)5,  (T)5,  (T)13, (T)8,  (T)8,  (T)17, (T)9,  (T)11, (T)12,
                (T)9,  (T)8,  (T)15, (T)6,  (T)15, (T)12, (T)5,  (T)10, (T)12, (T)7,  (T)14, (T)3,
                (T)11, (T)5,  (T)11, (T)13};
            x = {(T)1.9, (T)7,   (T)7.6, (T)7.4, (T)9,   (T)7.8, (T)9.3, (T)7.6, (T)8.5,
                 (T)7.8, (T)3.3, (T)0.3, (T)9.7, (T)4.6, (T)5,   (T)3.1, (T)3.5, (T)2.5,
                 (T)0.6, (T)9.3, (T)6.8, (T)1.8, (T)8.9, (T)8.4, (T)7.9};
            // b = alpha op(A) * x
            bref = {(T)1606.9, (T)1172.6, (T)1425.4, (T)1139.1, (T)1464.6, (T)1452.4, (T)934.7,
                    (T)1507.5, (T)1707.1, (T)1560.6, (T)1282.7, (T)1463.4, (T)1565.5, (T)1212.3,
                    (T)1537.3, (T)1559.6, (T)1429.8, (T)1683.2, (T)1302.4, (T)1591.5, (T)1254,
                    (T)1186.6, (T)1310.1, (T)1544,   (T)1643.9, (T)1175.8, (T)1567.1, (T)1316.6,
                    (T)1128.6, (T)1160.9, (T)1330.2, (T)1674.7, (T)1462.5};
            // ==== END   SECTION 3 ================================================
        }

        kt_spmv<SZ, T>(
            m, n, nnz, aval.data(), icola.data(), &icrowa[0], &icrowa[1], x.data(), b.data());

        tolerance_t<T> abserr = sqrt(std::numeric_limits<tolerance_t<T>>::epsilon());
        EXPECT_COMPLEX_ARR_NEAR(m, b, bref, abserr);
    }

    TEST(KT_L2, kt_spmv256)
    {
        driver_spmv<256, float>();
        driver_spmv<256, std::complex<float>>();
        driver_spmv<256, double>();
        driver_spmv<256, std::complex<double>>();
    }

#ifdef USE_AVX512
    TEST(KT_L2, kt_spmv512)
    {
        driver_spmv<512, float>();
        driver_spmv<512, std::complex<float>>();
        driver_spmv<512, double>();
        driver_spmv<512, std::complex<double>>();
    }
#endif
}

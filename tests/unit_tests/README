
####################################################################
# Creating aoclsparse unit tests  #
####################################################################

Vishwanath C

Revision: 0.1

Date: Nov 02, 2022

## Steps ##
 1. Make sure BUILD_UNIT_TESTS is enabled while configuring the project
 2. Create 3 categories of source files covering input-data/utils, unit test backbone and the actual google unit tests
		1. input data/utils: contains the input data that is needed for unit testing of sparse API. The files can also have any custom interfaces needed to call the actual APIs. Refer solver_data_utils.cpp/hpp
		2. backbone: this should implement the API by consuming the input provided in (1). This will be similar to test code in tests/include or tests/examples. Refer cg_ut_functions in CG tests, gmres_ut_functions in Gmres tests.
		3. gtest files: The test macros provided by Google Testing framework get defined here. We can use either the simple TEST() macros that have no test fixtures or TEST_F() macros which refer to a test fixture class that we are supposed to define. Gmres unit tests use this fixture and CG tests use a simple TEST() macro. Refer cg_tests.cc in CG tests and gmres_tests.cc in GMRES tests
3. Adding CMake commands to include the unit test as part of aocl-sparse's CMakebuild system
		1. Define a unique api test executable name and include the test source
			*add_executable(gmres_utests gmres_tests.cc ${utils_source})*
		2. Link the dependent sources and libraries 
			*target_link_libraries(gmres_utests aoclsparse GTest::gtest_main)*
		3. Add the test to our "make test" environment, which in turn uses CTest to run all the unit tests. gtest_discover_tests() command should be included towards the end of the file so that the specific test gets registered into CTest automatically.
			*gtest_discover_tests(gmres_utests)*
		4. To add support for ASAN verification for the unit test, link the address sanitizer library using the flag "-fsanitize=address"
			*target_compile_options(gmres_utests PRIVATE -fsanitize=address)*

## Executing the Unit Tests##
Execute ctest from the build directory
1. Run with no verbose logs
    ctest -j <N>
        - N : number of threads
2. Run the failed cases verbosely
    ctest -j <N> --output-on-failure            
3. Run the tests by building in Debug mode under Linux. This will also include Address SANitization. Requires either GCC or Clang compiler with Debug build (-DCMAKE_BUILD_TYPE=Debug)
	./gmres_utests
	./cg_utests	
Notes:
1. No need to define main() for the google tests, since it is already part of GTest library that is included as source repo dependency using FetchContent cmake command. So every cmake's clean build downloads the google test repo as per the tag provided, builds and the library built is linked against our project
2. Address Sanitizer (ASAN) is enabled in the Linux Debug build for GCC and Clang. It is used to detect possible leaks. Any leaks are considered as test failures.
3. ASAN verification is currently supported by GCC and Clang compilers on Linux. Support on Windows is not available for now.
